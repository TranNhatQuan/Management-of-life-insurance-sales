<!DOCTYPE html>
<html>

<head>
  <title>LIFE</title>
  <link href="https://cdn.datatables.net/1.11.3/css/jquery.dataTables.min.css" rel="stylesheet">
  <link href="https://cdn.datatables.net/1.11.3/css/dataTables.bootstrap5.min.css" rel="stylesheet">
  <link href="https://cdn.datatables.net/buttons/2.0.1/css/buttons.bootstrap5.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
  <style>
    input {
      width: 400px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }

    input[type="checkbox"] {
      width: 50px;
    }

    input[type="button"] {
      display: inline-block;
      padding: 5px;
      background-color: #3f87a6;
      border: none;
      color: #fff;
      font-weight: bold;

      border-radius: 4px;
      text-decoration: none;
      cursor: pointer;
    }

    select {
      border: 1px solid #ccc;
      border-radius: 4px;
    }

    select {
      border: 1px solid #ccc;
      border-radius: 4px;
    }

    select {
      border: 1px solid #ccc;
      border-radius: 4px;
    }

    .container {
      border-radius: 10px;
    }

    h3 {
      font-size: smaller;
      opacity: 0.5;
    }

    .form-group {
      margin: 10px;
    }

    #idStaff {
      outline: none;
      border: none;

    }

    button {
      display: inline-block;
      padding: 5px;
      background-color: #3f87a6;
      border: none;
      color: #fff;
      font-weight: bold;

      border-radius: 4px;
      text-decoration: none;
      cursor: pointer;
    }

    .select-wrapper {
      position: relative;
    }

    .select-dropdown {
      position: absolute;
      top: 100%;
      left: 0;
      width: 100%;
      max-height: 150px;
      overflow-y: auto;
      background-color: #fff;
      border: 1px solid #ccc;
      border-top: none;
      z-index: 1;
      display: none;
    }

    .select-dropdown {
      position: absolute;
      top: 100%;
      left: 0;
      width: 100%;
      max-height: 150px;
      overflow-y: auto;
      background-color: #fff;
      border: 1px solid #ccc;
      border-top: none;
      z-index: 1;
      display: none;
    }

    .select-item {
      padding: 8px;
      cursor: pointer;
    }

    .navbar {
      /* Thiết lập vị trí */
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;

      z-index: 2;
    }

    #form {
      margin-top: 100px;
      margin-left: 50px;
      margin-right: 50px;
      margin-bottom: 50px;
      /* Thiết lập vị trí */
      position: relative;
      z-index: 0;
    }

    h3 {
      font-size: smaller;
      margin-left: 10px;
      opacity: 0.5;
    }

    #subInsuranceCheckboxes {
      text-align: left;
    }

    #checkSub {
      display: none;
    }

    .beneficiary-input-container {
      margin-top: 5px;
    }

    /* Additional styling for the beneficiary input field (adjust as needed) */
    .beneficiary-input-container input {
      width: 100%;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
  </style>

</head>

<body>
  <%- include('../../layout/sidebar.ejs') %>
    <% if (typeof error !=='undefined' ) { %>
      <script>
        alert("<%= error %>");

      </script>
      <% delete error; %>
        <% } %>
          <div id="form">
            <h2>Tạo hợp đồng mới</h2>
            <h3>Tạo hợp đồng mới, mỗi hợp đồng đều phải kèm theo file pdf. Khi tạo hợp đồng mới mặc định là nhân viên
              tạo hợp đồng phụ trách thu tiền(nếu có) cho hợp đồng này và đã thu tiền lần 1 cho hợp đồng.</h3>
            <form id="yourFormId" action="/contract/addContract?url=/contract/addContract" method="post"
              enctype="multipart/form-data">
              <div class="row">
                <div class="col-md-6">

                  <div class="form-group">
                    <label for="idUser">Mã KH:</label>
                    <div>
                      <input type="number" id="idUser" name="idUser" min=1 required>
                    </div>
                  </div>
                  <div class="form-group">
                    <label for="signDate">Ngày ký:</label>
                    <div><input type="date" id="signDate" name="signDate" required max="<%= now %>" value="<%= now %>">
                    </div>
                  </div>
                  <div class="form-group">
                    <label for="searchInsurance">Chọn SP chính:</label>
                    <div class="select-wrapper">
                      <input type="text" id="searchInsurance" name="searchInsurance" placeholder="Tìm kiếm sản phẩm..."
                        required>
                      <div class="select-dropdown" id="insuranceDropdown">
                        <% insurances.forEach((product)=> { %>
                          <div class="select-item" data-id="<%= product.idInsurance %>">
                            <%= product.name %>(Mã bảo hiểm: <%= product.idInsurance %>)
                          </div>
                          <% }); %>
                      </div>
                    </div>
                  </div>
                  <div class="form-group">
                    <label for="idInsurance">Mã SP chính được chọn:</label>
                    <div>
                      <input id="idInsurance" name="idInsurance" required readonly>
                    </div>
                  </div>
                </div>

                <div class="col-md-6">
                  <div class="form-group">
                    <label for="addPdf">Thêm pdf:</label>
                    <div>
                      <input type="file" name="pdfFile" accept=".pdf" required>

                    </div>
                  </div>
                  <div class="form-group" id="checkSub">
                    <label for="checkSubInsurance">Chọn SP phụ:</label>
                    <div>
                      <div id="subInsuranceCheckboxes">
                        <!-- Checkbox options will be added here dynamically -->
                      </div>
                    </div>
                  </div>

                </div>
              </div>
              <input type="hidden" id="selectedSubInsuranceIds" name="selectedSubInsuranceIds">




              <div class="form-group">
                <button type="submit">Lưu</button>
              </div>
            </form>

          </div>

          <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
          <script src="https://cdn.datatables.net/1.11.3/js/jquery.dataTables.min.js"></script>
          <script src="https://cdn.datatables.net/select/1.3.3/js/dataTables.select.min.js"></script>

          <script src="https://cdn.datatables.net/1.11.3/js/jquery.dataTables.min.js"></script>
          <script src="https://cdn.datatables.net/1.11.3/js/dataTables.bootstrap5.min.js"></script>
          <script src="https://cdn.datatables.net/buttons/2.0.1/js/dataTables.buttons.min.js"></script>
          <script src="https://cdn.datatables.net/buttons/2.0.1/js/buttons.bootstrap5.min.js"></script>
          <script
            src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
          <script src="https://cdn.datatables.net/searchpanes/2.2.0/js/dataTables.searchPanes.min.js"></script>
          <script src="https://cdn.datatables.net/searchbuilder/1.2.1/js/dataTables.searchBuilder.min.js"></script>
          <script src="https://cdn.datatables.net/select/1.3.3/js/dataTables.select.min.js"></script>
          <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
          <script>
            // Function for handling insurance search and selection
            const searchInputInsurance = document.getElementById('searchInsurance');
            const dropdownInsurance = document.getElementById('insuranceDropdown');
            const idInsuranceInput = document.getElementById('idInsurance');
            const subInsurancesCheckboxesDiv = document.getElementById('subInsuranceCheckboxes');
            const selectedSubInsuranceIdsInput = document.getElementById('selectedSubInsuranceIds');
            const selectedSubInsuranceIds = new Set(); // Use Set to avoid duplicates


            // Function to update the hidden input field value with the selected sub-insurance ids
            function updateSelectedSubInsuranceIdsInput() {
              const idsArray = Array.from(selectedSubInsuranceIds);
              selectedSubInsuranceIdsInput.value = JSON.stringify(idsArray);
            }
            searchInputInsurance.addEventListener('input', () => {
              const searchValue = searchInputInsurance.value.trim().toLowerCase();

              // Show/hide items based on the search value
              Array.from(dropdownInsurance.children).forEach((item) => {
                const itemName = item.textContent.trim().toLowerCase();
                if (itemName.includes(searchValue)) {
                  item.style.display = 'block';
                } else {
                  item.style.display = 'none';
                }
              });
            });

            dropdownInsurance.addEventListener('click', (event) => {
              const selectedId = event.target.dataset.id;
              const selectedName = event.target.textContent.trim();
              idInsuranceInput.value = selectedId;
              fetchDataByIdInsurance(selectedId)
              searchInputInsurance.value = selectedName;
              dropdownInsurance.style.display = 'none';
            });

            // Close the dropdown if clicked outside
            window.addEventListener('click', (event) => {
              if (!event.target.matches('#searchInsurance')) {
                dropdownInsurance.style.display = 'none';
              }
            });

            // Open the dropdown when the search input is focused
            searchInputInsurance.addEventListener('focus', () => {
              dropdownInsurance.style.display = 'block';
            });

            const form = document.getElementById('yourFormId'); // Replace 'yourFormId' with the actual form ID
            form.addEventListener('submit', (event) => {

              if (!idInsuranceInput.value) {
                // Prevent form submission and display an error message
                event.preventDefault();
                alert('Vui lòng chọn sản phẩm chính.');
                return;
              }

              // If the idUser input has a value, the form will be submitted normally.
              // You can also perform additional validation checks here if needed.
            });
            function handleSubInsuranceQuantityChange(subInsuranceId, name, type, quantity) {
              const input = document.getElementById(`subInsuranceQuantity_${subInsuranceId}`);
              const beneficiaryInputContainer = document.getElementById(`beneficiaryInputContainer_${subInsuranceId}`);
              if (quantity >= 1) {
                selectedSubInsuranceIds.add(subInsuranceId);
              } else {
                selectedSubInsuranceIds.delete(subInsuranceId);
              }
              updateSelectedSubInsuranceIdsInput();
              if (type) {
                // If a quantity is entered, create and append the beneficiary input container
                const inputContainer = document.createElement('div');
                inputContainer.classList.add('beneficiary-input-container');
                inputContainer.id = `beneficiaryInputContainer_${subInsuranceId}`;

                const label = document.createElement('label');
                label.textContent = `Khách hàng thụ hưởng (${name}):`;

                const beneficiaryInput = document.createElement('input');
                beneficiaryInput.type = 'text';
                beneficiaryInput.name = `beneficiary_${subInsuranceId}`;
                beneficiaryInput.required = true;

                // Set a unique ID for each beneficiary input
                beneficiaryInput.id = `beneficiary_${subInsuranceId}`;

                inputContainer.appendChild(label);
                inputContainer.appendChild(beneficiaryInput);

                subInsurancesCheckboxesDiv.appendChild(inputContainer);
              } else {
                // If no quantity is entered, remove the entire beneficiary input container
                if (beneficiaryInputContainer) {
                  beneficiaryInputContainer.remove();
                }
              }
            }
            async function fetchDataByIdInsurance(idInsurance) {
              // Replace 'your-api-endpoint' with the actual URL of your server's API endpoint
              const url = `/contract/detailAndSub/${idInsurance}`;

              try {
                // Make the HTTP request using fetch
                const response = await fetch(url);
                const data = await response.json();



                const checkSub = document.getElementById('checkSub');
                checkSub.style.display = 'block'
                subInsurancesCheckboxesDiv.innerHTML = '';
                data.subInsurance.forEach((subInsurance) => {
                  // Create a div to hold the input field and label
                  const quantityInputDiv = document.createElement('div');
                  const quantityLabelDiv = document.createElement('div');
                  quantityInputDiv.classList.add('quantity-input-container');

                  // Create a label for the quantity input
                  const label = document.createElement('label');
                  label.htmlFor = `subInsuranceQuantity_${subInsurance.idInsurance}`;
                  label.textContent = `${subInsurance.name} (Số lượng):`;

                  // Append the label to the quantityInputDiv first
                  quantityLabelDiv.appendChild(label);
                  subInsurancesCheckboxesDiv.appendChild(quantityLabelDiv);

                  // Create an input field for each sub-insurance quantity
                  const quantityInput = document.createElement('input');
                  quantityInput.type = 'number';
                  quantityInput.style.width = '50px'
                  quantityInput.readOnly = true
                  quantityInput.name = `subInsuranceQuantity_${subInsurance.idInsurance}`;
                  quantityInput.min = '0';
                  quantityInput.step = '1'; // Allow increments and decrements by one
                  quantityInput.id = `subInsuranceQuantity_${subInsurance.idInsurance}`;


                  // Append the quantity input to the quantityInputDiv after the label
                  quantityInputDiv.appendChild(quantityInput);
                  const incrementButton = document.createElement('button');
                  incrementButton.style.width = '25px'
                  incrementButton.style.margin = '2px'
                  incrementButton.textContent = '+';
                  incrementButton.type = 'button';
                  incrementButton.addEventListener('click', () => {
                    quantityInput.stepUp(); // Increment the value by one
                    handleSubInsuranceQuantityChange(subInsurance.idInsurance, subInsurance.name, true, parseInt(quantityInput.value))
                  });

                  const decrementButton = document.createElement('button');
                  decrementButton.style.width = '25px'
                  decrementButton.style.margin = '2px'
                  decrementButton.textContent = '-';
                  decrementButton.type = 'button';
                  decrementButton.addEventListener('click', () => {
                    quantityInput.stepDown(); // Decrement the value by one
                    handleSubInsuranceQuantityChange(subInsurance.idInsurance, subInsurance.name, false, parseInt(quantityInput.value))
                  });

                  // Append the buttons to the quantityInputContainer
                  quantityInputDiv.appendChild(incrementButton);
                  quantityInputDiv.appendChild(decrementButton);
                  // Append the quantityInputDiv to the subInsuranceCheckboxes div
                  subInsurancesCheckboxesDiv.appendChild(quantityInputDiv);
                });


                // Update the form fields with the fetched data


              } catch (error) {
                console.error('Error fetching data:', error);
              }
            }
          </script>

</body>

</html>